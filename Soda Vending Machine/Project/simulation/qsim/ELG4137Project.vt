// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/12/2016 16:06:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    vendMachine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module vendMachine_vlg_sample_tst(
	c,
	choice,
	clk,
	reset,
	V,
	sampler_tx
);
input  c;
input  choice;
input  clk;
input  reset;
input [7:0] V;
output sampler_tx;

reg sample;
time current_time;
always @(c or choice or clk or reset or V)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module vendMachine_vlg_check_tst (
	Cxin,
	D,
	E,
	P,
	PequalToC,
	PgreaterThanC,
	Pin,
	PlessThanC,
	state0,
	state1,
	state2,
	sampler_rx
);
input [7:0] Cxin;
input [1:0] D;
input [7:0] E;
input [7:0] P;
input  PequalToC;
input  PgreaterThanC;
input [7:0] Pin;
input  PlessThanC;
input  state0;
input  state1;
input  state2;
input sampler_rx;

reg [7:0] Cxin_expected;
reg [1:0] D_expected;
reg [7:0] E_expected;
reg [7:0] P_expected;
reg  PequalToC_expected;
reg  PgreaterThanC_expected;
reg [7:0] Pin_expected;
reg  PlessThanC_expected;
reg  state0_expected;
reg  state1_expected;
reg  state2_expected;

reg [7:0] Cxin_prev;
reg [1:0] D_prev;
reg [7:0] E_prev;
reg [7:0] P_prev;
reg  PequalToC_prev;
reg  PgreaterThanC_prev;
reg [7:0] Pin_prev;
reg  PlessThanC_prev;
reg  state0_prev;
reg  state1_prev;
reg  state2_prev;

reg [7:0] Cxin_expected_prev;
reg [1:0] D_expected_prev;
reg [7:0] E_expected_prev;
reg [7:0] P_expected_prev;
reg  PequalToC_expected_prev;
reg  PgreaterThanC_expected_prev;
reg [7:0] Pin_expected_prev;
reg  PlessThanC_expected_prev;
reg  state0_expected_prev;
reg  state1_expected_prev;
reg  state2_expected_prev;

reg [7:0] last_Cxin_exp;
reg [1:0] last_D_exp;
reg [7:0] last_E_exp;
reg [7:0] last_P_exp;
reg  last_PequalToC_exp;
reg  last_PgreaterThanC_exp;
reg [7:0] last_Pin_exp;
reg  last_PlessThanC_exp;
reg  last_state0_exp;
reg  last_state1_exp;
reg  last_state2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cxin_prev = Cxin;
	D_prev = D;
	E_prev = E;
	P_prev = P;
	PequalToC_prev = PequalToC;
	PgreaterThanC_prev = PgreaterThanC;
	Pin_prev = Pin;
	PlessThanC_prev = PlessThanC;
	state0_prev = state0;
	state1_prev = state1;
	state2_prev = state2;
end

// update expected /o prevs

always @(trigger)
begin
	Cxin_expected_prev = Cxin_expected;
	D_expected_prev = D_expected;
	E_expected_prev = E_expected;
	P_expected_prev = P_expected;
	PequalToC_expected_prev = PequalToC_expected;
	PgreaterThanC_expected_prev = PgreaterThanC_expected;
	Pin_expected_prev = Pin_expected;
	PlessThanC_expected_prev = PlessThanC_expected;
	state0_expected_prev = state0_expected;
	state1_expected_prev = state1_expected;
	state2_expected_prev = state2_expected;
end


// expected P[ 7 ]
initial
begin
	P_expected[7] = 1'bX;
	P_expected[7] = #999000 1'b0;
end 
// expected P[ 6 ]
initial
begin
	P_expected[6] = 1'bX;
	P_expected[6] = #999000 1'b0;
end 
// expected P[ 5 ]
initial
begin
	P_expected[5] = 1'bX;
	P_expected[5] = #999000 1'b0;
end 
// expected P[ 4 ]
initial
begin
	P_expected[4] = 1'bX;
	P_expected[4] = #999000 1'b0;
end 
// expected P[ 3 ]
initial
begin
	P_expected[3] = 1'bX;
	P_expected[3] = #999000 1'b0;
end 
// expected P[ 2 ]
initial
begin
	P_expected[2] = 1'bX;
	P_expected[2] = #999000 1'b0;
end 
// expected P[ 1 ]
initial
begin
	P_expected[1] = 1'bX;
	P_expected[1] = #999000 1'b0;
end 
// expected P[ 0 ]
initial
begin
	P_expected[0] = 1'bX;
	P_expected[0] = #999000 1'b0;
end 
// expected E[ 7 ]
initial
begin
	E_expected[7] = 1'bX;
	E_expected[7] = #999000 1'b0;
end 
// expected E[ 6 ]
initial
begin
	E_expected[6] = 1'bX;
	E_expected[6] = #999000 1'b0;
end 
// expected E[ 5 ]
initial
begin
	E_expected[5] = 1'bX;
	E_expected[5] = #999000 1'b0;
end 
// expected E[ 4 ]
initial
begin
	E_expected[4] = 1'bX;
	E_expected[4] = #999000 1'b0;
end 
// expected E[ 3 ]
initial
begin
	E_expected[3] = 1'bX;
	E_expected[3] = #999000 1'b0;
end 
// expected E[ 2 ]
initial
begin
	E_expected[2] = 1'bX;
	E_expected[2] = #999000 1'b0;
end 
// expected E[ 1 ]
initial
begin
	E_expected[1] = 1'bX;
	E_expected[1] = #999000 1'b0;
end 
// expected E[ 0 ]
initial
begin
	E_expected[0] = 1'bX;
	E_expected[0] = #999000 1'b0;
end 
// expected D[ 1 ]
initial
begin
	D_expected[1] = 1'bX;
	D_expected[1] = #999000 1'b0;
end 
// expected D[ 0 ]
initial
begin
	D_expected[0] = 1'bX;
	D_expected[0] = #999000 1'b0;
end 

// expected state0
initial
begin
	state0_expected = 1'bX;
	state0_expected = #999000 1'b0;
end 

// expected state1
initial
begin
	state1_expected = 1'bX;
	state1_expected = #999000 1'b0;
end 

// expected state2
initial
begin
	state2_expected = 1'bX;
	state2_expected = #999000 1'b0;
end 

// expected PlessThanC
initial
begin
	PlessThanC_expected = 1'bX;
end 

// expected PgreaterThanC
initial
begin
	PgreaterThanC_expected = 1'bX;
end 

// expected PequalToC
initial
begin
	PequalToC_expected = 1'bX;
end 
// expected Cxin[ 7 ]
initial
begin
	Cxin_expected[7] = 1'bX;
end 
// expected Cxin[ 6 ]
initial
begin
	Cxin_expected[6] = 1'bX;
end 
// expected Cxin[ 5 ]
initial
begin
	Cxin_expected[5] = 1'bX;
end 
// expected Cxin[ 4 ]
initial
begin
	Cxin_expected[4] = 1'bX;
end 
// expected Cxin[ 3 ]
initial
begin
	Cxin_expected[3] = 1'bX;
end 
// expected Cxin[ 2 ]
initial
begin
	Cxin_expected[2] = 1'bX;
end 
// expected Cxin[ 1 ]
initial
begin
	Cxin_expected[1] = 1'bX;
end 
// expected Cxin[ 0 ]
initial
begin
	Cxin_expected[0] = 1'bX;
end 
// expected Pin[ 7 ]
initial
begin
	Pin_expected[7] = 1'bX;
end 
// expected Pin[ 6 ]
initial
begin
	Pin_expected[6] = 1'bX;
end 
// expected Pin[ 5 ]
initial
begin
	Pin_expected[5] = 1'bX;
end 
// expected Pin[ 4 ]
initial
begin
	Pin_expected[4] = 1'bX;
end 
// expected Pin[ 3 ]
initial
begin
	Pin_expected[3] = 1'bX;
end 
// expected Pin[ 2 ]
initial
begin
	Pin_expected[2] = 1'bX;
end 
// expected Pin[ 1 ]
initial
begin
	Pin_expected[1] = 1'bX;
end 
// expected Pin[ 0 ]
initial
begin
	Pin_expected[0] = 1'bX;
end 
// generate trigger
always @(Cxin_expected or Cxin or D_expected or D or E_expected or E or P_expected or P or PequalToC_expected or PequalToC or PgreaterThanC_expected or PgreaterThanC or Pin_expected or Pin or PlessThanC_expected or PlessThanC or state0_expected or state0 or state1_expected or state1 or state2_expected or state2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cxin = %b | expected D = %b | expected E = %b | expected P = %b | expected PequalToC = %b | expected PgreaterThanC = %b | expected Pin = %b | expected PlessThanC = %b | expected state0 = %b | expected state1 = %b | expected state2 = %b | ",Cxin_expected_prev,D_expected_prev,E_expected_prev,P_expected_prev,PequalToC_expected_prev,PgreaterThanC_expected_prev,Pin_expected_prev,PlessThanC_expected_prev,state0_expected_prev,state1_expected_prev,state2_expected_prev);
	$display("| real Cxin = %b | real D = %b | real E = %b | real P = %b | real PequalToC = %b | real PgreaterThanC = %b | real Pin = %b | real PlessThanC = %b | real state0 = %b | real state1 = %b | real state2 = %b | ",Cxin_prev,D_prev,E_prev,P_prev,PequalToC_prev,PgreaterThanC_prev,Pin_prev,PlessThanC_prev,state0_prev,state1_prev,state2_prev);
`endif
	if (
		( Cxin_expected_prev[0] !== 1'bx ) && ( Cxin_prev[0] !== Cxin_expected_prev[0] )
		&& ((Cxin_expected_prev[0] !== last_Cxin_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cxin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cxin_expected_prev);
		$display ("     Real value = %b", Cxin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cxin_exp[0] = Cxin_expected_prev[0];
	end
	if (
		( Cxin_expected_prev[1] !== 1'bx ) && ( Cxin_prev[1] !== Cxin_expected_prev[1] )
		&& ((Cxin_expected_prev[1] !== last_Cxin_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cxin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cxin_expected_prev);
		$display ("     Real value = %b", Cxin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cxin_exp[1] = Cxin_expected_prev[1];
	end
	if (
		( Cxin_expected_prev[2] !== 1'bx ) && ( Cxin_prev[2] !== Cxin_expected_prev[2] )
		&& ((Cxin_expected_prev[2] !== last_Cxin_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cxin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cxin_expected_prev);
		$display ("     Real value = %b", Cxin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cxin_exp[2] = Cxin_expected_prev[2];
	end
	if (
		( Cxin_expected_prev[3] !== 1'bx ) && ( Cxin_prev[3] !== Cxin_expected_prev[3] )
		&& ((Cxin_expected_prev[3] !== last_Cxin_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cxin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cxin_expected_prev);
		$display ("     Real value = %b", Cxin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cxin_exp[3] = Cxin_expected_prev[3];
	end
	if (
		( Cxin_expected_prev[4] !== 1'bx ) && ( Cxin_prev[4] !== Cxin_expected_prev[4] )
		&& ((Cxin_expected_prev[4] !== last_Cxin_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cxin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cxin_expected_prev);
		$display ("     Real value = %b", Cxin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cxin_exp[4] = Cxin_expected_prev[4];
	end
	if (
		( Cxin_expected_prev[5] !== 1'bx ) && ( Cxin_prev[5] !== Cxin_expected_prev[5] )
		&& ((Cxin_expected_prev[5] !== last_Cxin_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cxin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cxin_expected_prev);
		$display ("     Real value = %b", Cxin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cxin_exp[5] = Cxin_expected_prev[5];
	end
	if (
		( Cxin_expected_prev[6] !== 1'bx ) && ( Cxin_prev[6] !== Cxin_expected_prev[6] )
		&& ((Cxin_expected_prev[6] !== last_Cxin_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cxin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cxin_expected_prev);
		$display ("     Real value = %b", Cxin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cxin_exp[6] = Cxin_expected_prev[6];
	end
	if (
		( Cxin_expected_prev[7] !== 1'bx ) && ( Cxin_prev[7] !== Cxin_expected_prev[7] )
		&& ((Cxin_expected_prev[7] !== last_Cxin_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cxin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cxin_expected_prev);
		$display ("     Real value = %b", Cxin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cxin_exp[7] = Cxin_expected_prev[7];
	end
	if (
		( D_expected_prev[0] !== 1'bx ) && ( D_prev[0] !== D_expected_prev[0] )
		&& ((D_expected_prev[0] !== last_D_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_exp[0] = D_expected_prev[0];
	end
	if (
		( D_expected_prev[1] !== 1'bx ) && ( D_prev[1] !== D_expected_prev[1] )
		&& ((D_expected_prev[1] !== last_D_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_exp[1] = D_expected_prev[1];
	end
	if (
		( E_expected_prev[0] !== 1'bx ) && ( E_prev[0] !== E_expected_prev[0] )
		&& ((E_expected_prev[0] !== last_E_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[0] = E_expected_prev[0];
	end
	if (
		( E_expected_prev[1] !== 1'bx ) && ( E_prev[1] !== E_expected_prev[1] )
		&& ((E_expected_prev[1] !== last_E_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[1] = E_expected_prev[1];
	end
	if (
		( E_expected_prev[2] !== 1'bx ) && ( E_prev[2] !== E_expected_prev[2] )
		&& ((E_expected_prev[2] !== last_E_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[2] = E_expected_prev[2];
	end
	if (
		( E_expected_prev[3] !== 1'bx ) && ( E_prev[3] !== E_expected_prev[3] )
		&& ((E_expected_prev[3] !== last_E_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[3] = E_expected_prev[3];
	end
	if (
		( E_expected_prev[4] !== 1'bx ) && ( E_prev[4] !== E_expected_prev[4] )
		&& ((E_expected_prev[4] !== last_E_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[4] = E_expected_prev[4];
	end
	if (
		( E_expected_prev[5] !== 1'bx ) && ( E_prev[5] !== E_expected_prev[5] )
		&& ((E_expected_prev[5] !== last_E_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[5] = E_expected_prev[5];
	end
	if (
		( E_expected_prev[6] !== 1'bx ) && ( E_prev[6] !== E_expected_prev[6] )
		&& ((E_expected_prev[6] !== last_E_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[6] = E_expected_prev[6];
	end
	if (
		( E_expected_prev[7] !== 1'bx ) && ( E_prev[7] !== E_expected_prev[7] )
		&& ((E_expected_prev[7] !== last_E_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[7] = E_expected_prev[7];
	end
	if (
		( P_expected_prev[0] !== 1'bx ) && ( P_prev[0] !== P_expected_prev[0] )
		&& ((P_expected_prev[0] !== last_P_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[0] = P_expected_prev[0];
	end
	if (
		( P_expected_prev[1] !== 1'bx ) && ( P_prev[1] !== P_expected_prev[1] )
		&& ((P_expected_prev[1] !== last_P_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[1] = P_expected_prev[1];
	end
	if (
		( P_expected_prev[2] !== 1'bx ) && ( P_prev[2] !== P_expected_prev[2] )
		&& ((P_expected_prev[2] !== last_P_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[2] = P_expected_prev[2];
	end
	if (
		( P_expected_prev[3] !== 1'bx ) && ( P_prev[3] !== P_expected_prev[3] )
		&& ((P_expected_prev[3] !== last_P_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[3] = P_expected_prev[3];
	end
	if (
		( P_expected_prev[4] !== 1'bx ) && ( P_prev[4] !== P_expected_prev[4] )
		&& ((P_expected_prev[4] !== last_P_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[4] = P_expected_prev[4];
	end
	if (
		( P_expected_prev[5] !== 1'bx ) && ( P_prev[5] !== P_expected_prev[5] )
		&& ((P_expected_prev[5] !== last_P_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[5] = P_expected_prev[5];
	end
	if (
		( P_expected_prev[6] !== 1'bx ) && ( P_prev[6] !== P_expected_prev[6] )
		&& ((P_expected_prev[6] !== last_P_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[6] = P_expected_prev[6];
	end
	if (
		( P_expected_prev[7] !== 1'bx ) && ( P_prev[7] !== P_expected_prev[7] )
		&& ((P_expected_prev[7] !== last_P_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[7] = P_expected_prev[7];
	end
	if (
		( PequalToC_expected_prev !== 1'bx ) && ( PequalToC_prev !== PequalToC_expected_prev )
		&& ((PequalToC_expected_prev !== last_PequalToC_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PequalToC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PequalToC_expected_prev);
		$display ("     Real value = %b", PequalToC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PequalToC_exp = PequalToC_expected_prev;
	end
	if (
		( PgreaterThanC_expected_prev !== 1'bx ) && ( PgreaterThanC_prev !== PgreaterThanC_expected_prev )
		&& ((PgreaterThanC_expected_prev !== last_PgreaterThanC_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PgreaterThanC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PgreaterThanC_expected_prev);
		$display ("     Real value = %b", PgreaterThanC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PgreaterThanC_exp = PgreaterThanC_expected_prev;
	end
	if (
		( Pin_expected_prev[0] !== 1'bx ) && ( Pin_prev[0] !== Pin_expected_prev[0] )
		&& ((Pin_expected_prev[0] !== last_Pin_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Pin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Pin_expected_prev);
		$display ("     Real value = %b", Pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Pin_exp[0] = Pin_expected_prev[0];
	end
	if (
		( Pin_expected_prev[1] !== 1'bx ) && ( Pin_prev[1] !== Pin_expected_prev[1] )
		&& ((Pin_expected_prev[1] !== last_Pin_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Pin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Pin_expected_prev);
		$display ("     Real value = %b", Pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Pin_exp[1] = Pin_expected_prev[1];
	end
	if (
		( Pin_expected_prev[2] !== 1'bx ) && ( Pin_prev[2] !== Pin_expected_prev[2] )
		&& ((Pin_expected_prev[2] !== last_Pin_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Pin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Pin_expected_prev);
		$display ("     Real value = %b", Pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Pin_exp[2] = Pin_expected_prev[2];
	end
	if (
		( Pin_expected_prev[3] !== 1'bx ) && ( Pin_prev[3] !== Pin_expected_prev[3] )
		&& ((Pin_expected_prev[3] !== last_Pin_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Pin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Pin_expected_prev);
		$display ("     Real value = %b", Pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Pin_exp[3] = Pin_expected_prev[3];
	end
	if (
		( Pin_expected_prev[4] !== 1'bx ) && ( Pin_prev[4] !== Pin_expected_prev[4] )
		&& ((Pin_expected_prev[4] !== last_Pin_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Pin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Pin_expected_prev);
		$display ("     Real value = %b", Pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Pin_exp[4] = Pin_expected_prev[4];
	end
	if (
		( Pin_expected_prev[5] !== 1'bx ) && ( Pin_prev[5] !== Pin_expected_prev[5] )
		&& ((Pin_expected_prev[5] !== last_Pin_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Pin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Pin_expected_prev);
		$display ("     Real value = %b", Pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Pin_exp[5] = Pin_expected_prev[5];
	end
	if (
		( Pin_expected_prev[6] !== 1'bx ) && ( Pin_prev[6] !== Pin_expected_prev[6] )
		&& ((Pin_expected_prev[6] !== last_Pin_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Pin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Pin_expected_prev);
		$display ("     Real value = %b", Pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Pin_exp[6] = Pin_expected_prev[6];
	end
	if (
		( Pin_expected_prev[7] !== 1'bx ) && ( Pin_prev[7] !== Pin_expected_prev[7] )
		&& ((Pin_expected_prev[7] !== last_Pin_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Pin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Pin_expected_prev);
		$display ("     Real value = %b", Pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Pin_exp[7] = Pin_expected_prev[7];
	end
	if (
		( PlessThanC_expected_prev !== 1'bx ) && ( PlessThanC_prev !== PlessThanC_expected_prev )
		&& ((PlessThanC_expected_prev !== last_PlessThanC_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PlessThanC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PlessThanC_expected_prev);
		$display ("     Real value = %b", PlessThanC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PlessThanC_exp = PlessThanC_expected_prev;
	end
	if (
		( state0_expected_prev !== 1'bx ) && ( state0_prev !== state0_expected_prev )
		&& ((state0_expected_prev !== last_state0_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state0_expected_prev);
		$display ("     Real value = %b", state0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_state0_exp = state0_expected_prev;
	end
	if (
		( state1_expected_prev !== 1'bx ) && ( state1_prev !== state1_expected_prev )
		&& ((state1_expected_prev !== last_state1_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state1_expected_prev);
		$display ("     Real value = %b", state1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_state1_exp = state1_expected_prev;
	end
	if (
		( state2_expected_prev !== 1'bx ) && ( state2_prev !== state2_expected_prev )
		&& ((state2_expected_prev !== last_state2_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state2_expected_prev);
		$display ("     Real value = %b", state2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_state2_exp = state2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module vendMachine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg c;
reg choice;
reg clk;
reg reset;
reg [7:0] V;
// wires                                               
wire [7:0] Cxin;
wire [1:0] D;
wire [7:0] E;
wire [7:0] P;
wire PequalToC;
wire PgreaterThanC;
wire [7:0] Pin;
wire PlessThanC;
wire state0;
wire state1;
wire state2;

wire sampler;                             

// assign statements (if any)                          
vendMachine i1 (
// port map - connection between master ports and signals/registers   
	.c(c),
	.choice(choice),
	.clk(clk),
	.Cxin(Cxin),
	.D(D),
	.E(E),
	.P(P),
	.PequalToC(PequalToC),
	.PgreaterThanC(PgreaterThanC),
	.Pin(Pin),
	.PlessThanC(PlessThanC),
	.reset(reset),
	.state0(state0),
	.state1(state1),
	.state2(state2),
	.V(V)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2500000 1'b1;
	#2500000;
end 

// c
initial
begin
	c = 1'b0;
	c = #5000000 1'b1;
	c = #5000000 1'b0;
	c = #20000000 1'b1;
	c = #5000000 1'b0;
	c = #15000000 1'b1;
	c = #5000000 1'b0;
	c = #15000000 1'b1;
	c = #5000000 1'b0;
end 

// choice
initial
begin
	choice = 1'b0;
end 
// V[ 7 ]
initial
begin
	V[7] = 1'b0;
end 
// V[ 6 ]
initial
begin
	V[6] = 1'b0;
end 
// V[ 5 ]
initial
begin
	V[5] = 1'b0;
end 
// V[ 4 ]
initial
begin
	V[4] = 1'b0;
	V[4] = #70000000 1'b1;
	V[4] = #10000000 1'b0;
end 
// V[ 3 ]
initial
begin
	V[3] = 1'b0;
	V[3] = #30000000 1'b1;
	V[3] = #5000000 1'b0;
	V[3] = #15000000 1'b1;
	V[3] = #5000000 1'b0;
	V[3] = #15000000 1'b1;
	V[3] = #10000000 1'b0;
end 
// V[ 2 ]
initial
begin
	V[2] = 1'b0;
	V[2] = #5000000 1'b1;
	V[2] = #10000000 1'b0;
	V[2] = #55000000 1'b1;
	V[2] = #10000000 1'b0;
end 
// V[ 1 ]
initial
begin
	V[1] = 1'b0;
	V[1] = #30000000 1'b1;
	V[1] = #5000000 1'b0;
	V[1] = #15000000 1'b1;
	V[1] = #5000000 1'b0;
	V[1] = #15000000 1'b1;
	V[1] = #10000000 1'b0;
end 
// V[ 0 ]
initial
begin
	V[0] = 1'b0;
	V[0] = #5000000 1'b1;
	V[0] = #10000000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

vendMachine_vlg_sample_tst tb_sample (
	.c(c),
	.choice(choice),
	.clk(clk),
	.reset(reset),
	.V(V),
	.sampler_tx(sampler)
);

vendMachine_vlg_check_tst tb_out(
	.Cxin(Cxin),
	.D(D),
	.E(E),
	.P(P),
	.PequalToC(PequalToC),
	.PgreaterThanC(PgreaterThanC),
	.Pin(Pin),
	.PlessThanC(PlessThanC),
	.state0(state0),
	.state1(state1),
	.state2(state2),
	.sampler_rx(sampler)
);
endmodule

